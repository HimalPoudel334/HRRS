// <auto-generated />
using HRRS.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRRS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRRS.Persistence.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HospitalStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FiscalYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MapdandaId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MapdandaId");

                    b.ToTable("HospitalStandards");
                });

            modelBuilder.Entity("Mapdanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnusuchiNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Mapdandas");
                });

            modelBuilder.Entity("Persistence.Entities.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationSubmittedAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationSubmittedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApporvingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalValidityTill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailableServices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<string>("DateOfInspection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBranchExtension")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExecutionPermission")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLetterOfIntent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRelocation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRenewal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsServiceExtension")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpgrade")
                        .HasColumnType("bit");

                    b.Property<string>("LastRenewedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionReceivedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenewalValidityTill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenewingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialistCount")
                        .HasColumnType("int");

                    b.Property<string>("Tole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpgradeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpgradingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HealthFacilities");
                });

            modelBuilder.Entity("HospitalStandard", b =>
                {
                    b.HasOne("Persistence.Entities.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mapdanda", "Mapdanda")
                        .WithMany()
                        .HasForeignKey("MapdandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthFacility");

                    b.Navigation("Mapdanda");
                });
#pragma warning restore 612, 618
        }
    }
}
