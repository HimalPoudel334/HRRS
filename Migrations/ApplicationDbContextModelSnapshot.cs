// <auto-generated />
using System;
using HRRS.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRRS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Anusuchi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DafaNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Anusuchis");
                });

            modelBuilder.Entity("AnusuchiMappingMapdandaTable", b =>
                {
                    b.Property<int>("AnusuchiMappingsId")
                        .HasColumnType("int");

                    b.Property<int>("MapdandaTablesId")
                        .HasColumnType("int");

                    b.HasKey("AnusuchiMappingsId", "MapdandaTablesId");

                    b.HasIndex("MapdandaTablesId");

                    b.ToTable("AnusuchiMappingMapdandaTable");
                });

            modelBuilder.Entity("FacilityTypeRole", b =>
                {
                    b.Property<int>("FacilityTypesSN")
                        .HasColumnType("int");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("int");

                    b.HasKey("FacilityTypesSN", "UserRolesId");

                    b.HasIndex("UserRolesId");

                    b.ToTable("FacilityTypeRole");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.AnusuchiMapdandaTableMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnusuchiId")
                        .HasColumnType("int");

                    b.Property<int>("AnusuchiMappingId")
                        .HasColumnType("int");

                    b.Property<int?>("ParichhedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnusuchiId");

                    b.HasIndex("AnusuchiMappingId");

                    b.HasIndex("ParichhedId");

                    b.ToTable("AnusuchiMapdandaTableMappings");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.AnusuchiMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BedCountId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedCountId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubmissionTypeId");

                    b.ToTable("AnusuchiMappings");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.BedCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Count")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BedCount");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.LocalLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("LocalLevels");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnusuchiId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormType")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParichhedId")
                        .HasColumnType("int");

                    b.Property<int?>("SubParichhedId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnusuchiId");

                    b.HasIndex("ParichhedId");

                    b.HasIndex("SubParichhedId");

                    b.ToTable("MapdandaTables");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MasterStandardEntry", b =>
                {
                    b.Property<Guid>("SubmissionCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("bigint");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNewEntry")
                        .HasColumnType("bit");

                    b.Property<long?>("RejectedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionCode");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("RejectedById");

                    b.HasIndex("SubmissionTypeId");

                    b.ToTable("MasterStandardEntries");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.RegistrationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HandledById")
                        .HasColumnType("bigint");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HandledById");

                    b.HasIndex("HealthFacilityId");

                    b.ToTable("RegistrationRequests");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BedCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.SubmissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubmissionTypes");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HospitalStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FiscalYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MapdandaId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardEntryId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MapdandaId");

                    b.HasIndex("StandardEntryId");

                    b.ToTable("HospitalStandards");
                });

            modelBuilder.Entity("HospitalStandardEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MasterStandardEntrySubmissionCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterStandardEntrySubmissionCode");

                    b.ToTable("HospitalStandardEntrys");
                });

            modelBuilder.Entity("Mapdanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Col5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Col6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Col7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Col8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Col9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormType")
                        .HasColumnType("int");

                    b.Property<bool>("HasGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("Is100Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Is200Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Is25Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Is50Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableDivided")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCol5Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCol6Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCol7Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCol8Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCol9Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubGroup")
                        .HasColumnType("bit");

                    b.Property<int>("MapdandaTableId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("Parimaad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SubParichhedId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSubParichhedId")
                        .HasColumnType("int");

                    b.Property<string>("Value100")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value200")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value25")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value50")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MapdandaTableId");

                    b.HasIndex("SubParichhedId");

                    b.HasIndex("SubSubParichhedId");

                    b.ToTable("Mapdandas");
                });

            modelBuilder.Entity("Parichhed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnusuchiId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnusuchiId");

                    b.ToTable("Parichheds");
                });

            modelBuilder.Entity("Persistence.Entities.FacilityType", b =>
                {
                    b.Property<int>("SN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SN"));

                    b.Property<bool>("ACTIVE")
                        .HasColumnType("bit");

                    b.Property<string>("HOSP_CODE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HOSP_TYPE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SN");

                    b.ToTable("HospitalType");
                });

            modelBuilder.Entity("Persistence.Entities.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationSubmittedAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationSubmittedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApporvingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalValidityTill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailableServices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<string>("DateOfInspection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("ExecutiveHeadEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBranchExtension")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExecutionPermission")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLetterOfIntent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRelocation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRenewal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsServiceExtension")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpgrade")
                        .HasColumnType("bit");

                    b.Property<string>("LastRenewedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<int>("LocalLevelId")
                        .HasColumnType("int");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionReceivedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("RenewalValidityTill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenewingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialistCount")
                        .HasColumnType("int");

                    b.Property<string>("Tole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpgradeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpgradingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("LocalLevelId");

                    b.HasIndex("PanNumber")
                        .IsUnique();

                    b.HasIndex("ProvinceId");

                    b.ToTable("HealthFacilities");
                });

            modelBuilder.Entity("Persistence.Entities.TempHealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvailableServices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<int>("LocalLevelId")
                        .HasColumnType("int");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialistCount")
                        .HasColumnType("int");

                    b.Property<string>("Tole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("LocalLevelId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("TempHealthFacilities");
                });

            modelBuilder.Entity("SubMapdanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MapdandaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parimaad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MapdandaId");

                    b.ToTable("SubMapdandas");
                });

            modelBuilder.Entity("SubParichhed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParichhedId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParichhedId");

                    b.ToTable("SubParichheds");
                });

            modelBuilder.Entity("SubSubParichhed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubParichhedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubParichhedId");

                    b.ToTable("SubSubParichheds");
                });

            modelBuilder.Entity("AnusuchiMappingMapdandaTable", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.AnusuchiMapping", null)
                        .WithMany()
                        .HasForeignKey("AnusuchiMappingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.MapdandaTable", null)
                        .WithMany()
                        .HasForeignKey("MapdandaTablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacilityTypeRole", b =>
                {
                    b.HasOne("Persistence.Entities.FacilityType", null)
                        .WithMany()
                        .HasForeignKey("FacilityTypesSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.AnusuchiMapdandaTableMapping", b =>
                {
                    b.HasOne("Anusuchi", "Anusuchi")
                        .WithMany()
                        .HasForeignKey("AnusuchiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.AnusuchiMapping", "AnusuchiMapping")
                        .WithMany("TableList")
                        .HasForeignKey("AnusuchiMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parichhed", "Parichhed")
                        .WithMany()
                        .HasForeignKey("ParichhedId");

                    b.Navigation("Anusuchi");

                    b.Navigation("AnusuchiMapping");

                    b.Navigation("Parichhed");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.AnusuchiMapping", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.BedCount", "BedCount")
                        .WithMany()
                        .HasForeignKey("BedCountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.SubmissionType", "SubmissionType")
                        .WithMany()
                        .HasForeignKey("SubmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedCount");

                    b.Navigation("FacilityType");

                    b.Navigation("Role");

                    b.Navigation("SubmissionType");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.District", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.LocalLevel", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTable", b =>
                {
                    b.HasOne("Anusuchi", "Anusuchi")
                        .WithMany()
                        .HasForeignKey("AnusuchiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parichhed", "Parichhed")
                        .WithMany()
                        .HasForeignKey("ParichhedId");

                    b.HasOne("SubParichhed", "SubParichhed")
                        .WithMany()
                        .HasForeignKey("SubParichhedId");

                    b.Navigation("Anusuchi");

                    b.Navigation("Parichhed");

                    b.Navigation("SubParichhed");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MasterStandardEntry", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("Persistence.Entities.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.User", "RejectedBy")
                        .WithMany()
                        .HasForeignKey("RejectedById");

                    b.HasOne("HRRS.Persistence.Entities.SubmissionType", "SubmissionType")
                        .WithMany()
                        .HasForeignKey("SubmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("HealthFacility");

                    b.Navigation("RejectedBy");

                    b.Navigation("SubmissionType");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.RegistrationRequest", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.User", "HandledBy")
                        .WithMany()
                        .HasForeignKey("HandledById");

                    b.HasOne("Persistence.Entities.TempHealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HandledBy");

                    b.Navigation("HealthFacility");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.User", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId");

                    b.HasOne("HRRS.Persistence.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("District");

                    b.Navigation("FacilityType");

                    b.Navigation("HealthFacility");

                    b.Navigation("Province");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HospitalStandard", b =>
                {
                    b.HasOne("Mapdanda", "Mapdanda")
                        .WithMany()
                        .HasForeignKey("MapdandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalStandardEntry", "StandardEntry")
                        .WithMany("HospitalStandards")
                        .HasForeignKey("StandardEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mapdanda");

                    b.Navigation("StandardEntry");
                });

            modelBuilder.Entity("HospitalStandardEntry", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.MasterStandardEntry", "MasterStandardEntry")
                        .WithMany("HospitalStandardEntries")
                        .HasForeignKey("MasterStandardEntrySubmissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterStandardEntry");
                });

            modelBuilder.Entity("Mapdanda", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.MapdandaTable", "MapdandaTable")
                        .WithMany("Mapdandas")
                        .HasForeignKey("MapdandaTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubParichhed", null)
                        .WithMany("Mapdandas")
                        .HasForeignKey("SubParichhedId");

                    b.HasOne("SubSubParichhed", null)
                        .WithMany("Mapdandas")
                        .HasForeignKey("SubSubParichhedId");

                    b.Navigation("MapdandaTable");
                });

            modelBuilder.Entity("Parichhed", b =>
                {
                    b.HasOne("Anusuchi", "Anusuchi")
                        .WithMany("Parichheds")
                        .HasForeignKey("AnusuchiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anusuchi");
                });

            modelBuilder.Entity("Persistence.Entities.HealthFacility", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.LocalLevel", "LocalLevel")
                        .WithMany()
                        .HasForeignKey("LocalLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("FacilityType");

                    b.Navigation("LocalLevel");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Persistence.Entities.TempHealthFacility", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.LocalLevel", "LocalLevel")
                        .WithMany()
                        .HasForeignKey("LocalLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("FacilityType");

                    b.Navigation("LocalLevel");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SubMapdanda", b =>
                {
                    b.HasOne("Mapdanda", "Mapdanda")
                        .WithMany("SubMapdandas")
                        .HasForeignKey("MapdandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mapdanda");
                });

            modelBuilder.Entity("SubParichhed", b =>
                {
                    b.HasOne("Parichhed", "Parichhed")
                        .WithMany("SubParichheds")
                        .HasForeignKey("ParichhedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parichhed");
                });

            modelBuilder.Entity("SubSubParichhed", b =>
                {
                    b.HasOne("SubParichhed", "SubParichhed")
                        .WithMany("SubSubParichheds")
                        .HasForeignKey("SubParichhedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubParichhed");
                });

            modelBuilder.Entity("Anusuchi", b =>
                {
                    b.Navigation("Parichheds");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.AnusuchiMapping", b =>
                {
                    b.Navigation("TableList");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTable", b =>
                {
                    b.Navigation("Mapdandas");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MasterStandardEntry", b =>
                {
                    b.Navigation("HospitalStandardEntries");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HospitalStandardEntry", b =>
                {
                    b.Navigation("HospitalStandards");
                });

            modelBuilder.Entity("Mapdanda", b =>
                {
                    b.Navigation("SubMapdandas");
                });

            modelBuilder.Entity("Parichhed", b =>
                {
                    b.Navigation("SubParichheds");
                });

            modelBuilder.Entity("SubParichhed", b =>
                {
                    b.Navigation("Mapdandas");

                    b.Navigation("SubSubParichheds");
                });

            modelBuilder.Entity("SubSubParichhed", b =>
                {
                    b.Navigation("Mapdandas");
                });
#pragma warning restore 612, 618
        }
    }
}
