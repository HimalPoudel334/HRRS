// <auto-generated />
using System;
using HRRS.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRRS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250219122332_AddedIsActiveFlag")]
    partial class AddedIsActiveFlag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Anusuchi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DafaNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Anusuchis");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTableHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnusuchiId")
                        .HasColumnType("int");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParichhedId")
                        .HasColumnType("int");

                    b.Property<int?>("SubParichhedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnusuchiId");

                    b.HasIndex("ParichhedId");

                    b.HasIndex("SubParichhedId");

                    b.ToTable("MapdandaTableHeaders");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTableValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MapdandaId")
                        .HasColumnType("int");

                    b.Property<int?>("MapdandaTableHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("SubHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MapdandaId");

                    b.HasIndex("MapdandaTableHeaderId");

                    b.HasIndex("SubHeaderId");

                    b.ToTable("MapdandaTableValues");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MasterStandardEntry", b =>
                {
                    b.Property<Guid>("SubmissionCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionCode");

                    b.HasIndex("HealthFacilityId");

                    b.ToTable("MasterStandardEntries");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.SubHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MapdandaTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapdandaTableId");

                    b.ToTable("SubHeaders");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<int?>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("HealthFacilityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HospitalStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FiscalYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MapdandaId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardEntryId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MapdandaId");

                    b.HasIndex("StandardEntryId");

                    b.ToTable("HospitalStandards");
                });

            modelBuilder.Entity("HospitalStandardEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MasterStandardEntrySubmissionCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterStandardEntrySubmissionCode");

                    b.ToTable("HospitalStandardEntrys");
                });

            modelBuilder.Entity("Mapdanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnusuchiId")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is100Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Is200Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Is25Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Is50Active")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableDivided")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParichhedId")
                        .HasColumnType("int");

                    b.Property<string>("Parimaad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SubParichhedId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSubParichhedId")
                        .HasColumnType("int");

                    b.Property<string>("Value100")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value200")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value25")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value50")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnusuchiId");

                    b.HasIndex("ParichhedId");

                    b.HasIndex("SubParichhedId");

                    b.HasIndex("SubSubParichhedId");

                    b.ToTable("Mapdandas");
                });

            modelBuilder.Entity("Parichhed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnusuchiId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnusuchiId");

                    b.ToTable("Parichheds");
                });

            modelBuilder.Entity("Persistence.Entities.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationSubmittedAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationSubmittedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApporvingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalValidityTill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailableServices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<string>("DateOfInspection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveHeadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityHeadPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBranchExtension")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExecutionPermission")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLetterOfIntent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRelocation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRenewal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsServiceExtension")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpgrade")
                        .HasColumnType("bit");

                    b.Property<string>("LastRenewedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionReceivedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenewalValidityTill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenewingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialistCount")
                        .HasColumnType("int");

                    b.Property<string>("Tole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpgradeDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpgradingAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PanNumber")
                        .IsUnique();

                    b.ToTable("HealthFacilities");
                });

            modelBuilder.Entity("SubMapdanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MapdandaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parimaad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MapdandaId");

                    b.ToTable("SubMapdandas");
                });

            modelBuilder.Entity("SubParichhed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParichhedId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParichhedId");

                    b.ToTable("SubParichheds");
                });

            modelBuilder.Entity("SubSubParichhed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubParichhedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubParichhedId");

                    b.ToTable("SubSubParichheds");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTableHeader", b =>
                {
                    b.HasOne("Anusuchi", "Anusuchi")
                        .WithMany()
                        .HasForeignKey("AnusuchiId");

                    b.HasOne("Parichhed", "Parichhed")
                        .WithMany()
                        .HasForeignKey("ParichhedId");

                    b.HasOne("SubParichhed", "SubParichhed")
                        .WithMany()
                        .HasForeignKey("SubParichhedId");

                    b.Navigation("Anusuchi");

                    b.Navigation("Parichhed");

                    b.Navigation("SubParichhed");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTableValue", b =>
                {
                    b.HasOne("Mapdanda", "Mapdanda")
                        .WithMany("TableValues")
                        .HasForeignKey("MapdandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRRS.Persistence.Entities.MapdandaTableHeader", null)
                        .WithMany("TableValues")
                        .HasForeignKey("MapdandaTableHeaderId");

                    b.HasOne("HRRS.Persistence.Entities.SubHeader", null)
                        .WithMany("TableValues")
                        .HasForeignKey("SubHeaderId");

                    b.Navigation("Mapdanda");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MasterStandardEntry", b =>
                {
                    b.HasOne("Persistence.Entities.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthFacility");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.SubHeader", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.MapdandaTableHeader", "MapdandaTable")
                        .WithMany("SubHeaders")
                        .HasForeignKey("MapdandaTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapdandaTable");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.User", b =>
                {
                    b.HasOne("Persistence.Entities.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId");

                    b.Navigation("HealthFacility");
                });

            modelBuilder.Entity("HospitalStandard", b =>
                {
                    b.HasOne("Mapdanda", "Mapdanda")
                        .WithMany()
                        .HasForeignKey("MapdandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalStandardEntry", "StandardEntry")
                        .WithMany("HospitalStandards")
                        .HasForeignKey("StandardEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mapdanda");

                    b.Navigation("StandardEntry");
                });

            modelBuilder.Entity("HospitalStandardEntry", b =>
                {
                    b.HasOne("HRRS.Persistence.Entities.MasterStandardEntry", "MasterStandardEntry")
                        .WithMany("HospitalStandardEntries")
                        .HasForeignKey("MasterStandardEntrySubmissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterStandardEntry");
                });

            modelBuilder.Entity("Mapdanda", b =>
                {
                    b.HasOne("Anusuchi", "Anusuchi")
                        .WithMany()
                        .HasForeignKey("AnusuchiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parichhed", "Parichhed")
                        .WithMany()
                        .HasForeignKey("ParichhedId");

                    b.HasOne("SubParichhed", "SubParichhed")
                        .WithMany("Mapdandas")
                        .HasForeignKey("SubParichhedId");

                    b.HasOne("SubSubParichhed", "SubSubParichhed")
                        .WithMany("Mapdandas")
                        .HasForeignKey("SubSubParichhedId");

                    b.Navigation("Anusuchi");

                    b.Navigation("Parichhed");

                    b.Navigation("SubParichhed");

                    b.Navigation("SubSubParichhed");
                });

            modelBuilder.Entity("Parichhed", b =>
                {
                    b.HasOne("Anusuchi", "Anusuchi")
                        .WithMany("Parichheds")
                        .HasForeignKey("AnusuchiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anusuchi");
                });

            modelBuilder.Entity("SubMapdanda", b =>
                {
                    b.HasOne("Mapdanda", "Mapdanda")
                        .WithMany("SubMapdandas")
                        .HasForeignKey("MapdandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mapdanda");
                });

            modelBuilder.Entity("SubParichhed", b =>
                {
                    b.HasOne("Parichhed", "Parichhed")
                        .WithMany("SubParichheds")
                        .HasForeignKey("ParichhedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parichhed");
                });

            modelBuilder.Entity("SubSubParichhed", b =>
                {
                    b.HasOne("SubParichhed", "SubParichhed")
                        .WithMany("SubSubParichheds")
                        .HasForeignKey("SubParichhedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubParichhed");
                });

            modelBuilder.Entity("Anusuchi", b =>
                {
                    b.Navigation("Parichheds");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MapdandaTableHeader", b =>
                {
                    b.Navigation("SubHeaders");

                    b.Navigation("TableValues");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.MasterStandardEntry", b =>
                {
                    b.Navigation("HospitalStandardEntries");
                });

            modelBuilder.Entity("HRRS.Persistence.Entities.SubHeader", b =>
                {
                    b.Navigation("TableValues");
                });

            modelBuilder.Entity("HospitalStandardEntry", b =>
                {
                    b.Navigation("HospitalStandards");
                });

            modelBuilder.Entity("Mapdanda", b =>
                {
                    b.Navigation("SubMapdandas");

                    b.Navigation("TableValues");
                });

            modelBuilder.Entity("Parichhed", b =>
                {
                    b.Navigation("SubParichheds");
                });

            modelBuilder.Entity("SubParichhed", b =>
                {
                    b.Navigation("Mapdandas");

                    b.Navigation("SubSubParichheds");
                });

            modelBuilder.Entity("SubSubParichhed", b =>
                {
                    b.Navigation("Mapdandas");
                });
#pragma warning restore 612, 618
        }
    }
}
